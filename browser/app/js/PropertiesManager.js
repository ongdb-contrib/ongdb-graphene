'use strict';
/** @jsx h */
import {h, Component} from 'preact';

import CONST from './enums/CONST';
import PROPERTY_TYPES from './enums/PROPERTY_TYPES';
import Property from './do/Property';

/* example component to start from */
class PropertiesManager extends Component {
  constructor(props) {
    super(props);

    this.state = {
      selectedProperty: null,
      entity: props.entity
    };
  }

  componentWillReceiveProps(nextProps) {
    this.setState({
      entity: nextProps.entity,
      selectedProperty: null
    });
  }

  componentWillUpdate(props, state) {
    this.props.onEntityChange(state.entity);
  }

  selectProperty(prop) {
    this.setState({ selectedProperty: prop });
  }

  addProperty() {
    const entity = this.state.entity;
    entity.properties.push(new Property());

    this.setState({ entity });
  }

  changePropertyName(e, prop) {
    prop.key = e.target.value;
  }

  deleteProperty(prop) {
    const entity = this.state.entity;
    const selectedProperty = this.state.selectedProperty;
    entity.properties = entity.properties.filter((property) => property.id !== prop.id);

    if (selectedProperty && selectedProperty.id === prop.id) {
      this.setState({ selectedProperty: null });
    }

    this.setState({ entity });
  }

  render(props, state) {
    const entity = state.entity;
    const typesWithLimit = [PROPERTY_TYPES.STRING, PROPERTY_TYPES.INT, PROPERTY_TYPES.FLOAT, PROPERTY_TYPES.URL, PROPERTY_TYPES.EMAIL, PROPERTY_TYPES.PASSWORD];
    const textTypes = [PROPERTY_TYPES.STRING, PROPERTY_TYPES.URL, PROPERTY_TYPES.EMAIL, PROPERTY_TYPES.PASSWORD];

    if (!entity) {
      return <div className="no-selected">Select node/edge to edit properties</div>;
    }

    return <div id={CONST.PROPERTY_MENU_ID} className={CONST.PROPERTY_MENU_CLASS}>
      <div className="header">
        <span className="color">
          <input id="entity-color" value={entity.color} onInput={ this.linkState('entity.color')} type="color" />
        </span>
        <span className="label">
          <input id="entity-label" value={entity.label} onInput={ this.linkState('entity.label') }/>
          <small className="type">{entity.isNode && 'node' || entity.isEdge && 'edge'}</small>
        </span>
        <button className="add-button" onClick={ this.addProperty.bind(this) }>+ Add property</button>
      </div>
      <div className="main">
        <div className="properties">
          <ul id="properties-list">
            { entity.properties.map((prop) => <li className={{
              selected: (state.selectedProperty && prop.id === state.selectedProperty.id),
              disabled: prop.isSystem
            }}>
              <div className="property">
                <input
                    type="text"
                    className="propertyName"
                    value={prop.key}
                    onInput={ (e) => this.changePropertyName(e, prop) }
                    onClick={this.selectProperty.bind(this, prop)}
                    disabled={prop.isSystem}
                />
                <small className="type">{prop.type}{prop.isRequired ? '!' : ''}{prop.isAutoGenerated ? '@' : ''}</small>
                &nbsp;
              </div>
              <div className="remove-property-button" title="Delete" onClick={ this.deleteProperty.bind(this, prop) }>
                x
              </div>
            </li>)
            }
          </ul>
        </div>
        { state.selectedProperty &&
        <div className="property-edit" id="property-edit">
          <ul>
            <li>
              <label>
                <span>type:</span>
                <select value={ state.selectedProperty.type } onChange={ this.linkState('selectedProperty.type') }>
                  {
                    Object.keys(PROPERTY_TYPES).map((type) => <option
                        value={PROPERTY_TYPES[type]}>{PROPERTY_TYPES[type]}</option>)
                  }
                </select>
              </label>
            </li>
            { !state.selectedProperty.isAutoGenerated &&
            <li>
              <label>
                <span title="Property's default value">Default:</span>
                <input
                    className="defaultValue"
                    value={ state.selectedProperty.defaultValue }
                    onInput={ this.linkState('selectedProperty.defaultValue') }
                />
              </label>
            </li>
            }
            <li>
              <label>
                <span title="Is the property required">Required:</span>
                <input
                    className="isRequired"
                    type="checkbox"
                    checked={ state.selectedProperty.isRequired }
                    onClick={ this.linkState('selectedProperty.isRequired') }
                />
              </label>
            </li>
            <li>
              <label>
                <span title="Auto generated">Auto gen.:</span>
                <input
                    className="isRequired"
                    type="checkbox"
                    checked={ state.selectedProperty.isAutoGenerated }
                    onClick={ this.linkState('selectedProperty.isAutoGenerated') }
                />
              </label>
            </li>

            { (typesWithLimit.indexOf(state.selectedProperty.type) !== -1) &&
            <li>
              <label>
                <span>min{ textTypes.indexOf(state.selectedProperty.type) !== -1 ? ' len.' : '' }:</span>
                <input
                    className="limitMin"
                    type="number"
                    min="0"
                    max="100000"
                    value={state.selectedProperty.limitMin}
                    onInput={ this.linkState('selectedProperty.limitMin') }
                />
              </label>
              <label>
                <span>max{ textTypes.indexOf(state.selectedProperty.type) !== -1 ? ' len.' : '' }:</span>
                <input
                    className="limitMin"
                    type="number"
                    min="0"
                    max="100000"
                    value={state.selectedProperty.limitMax}
                    onInput={ this.linkState('selectedProperty.limitMax') }
                />
              </label>
            </li>
            }
          </ul>
          <div className="propertyDescription">
            <label>
              <span>Description:</span>
              <input
                  value={state.selectedProperty.description}
                  onInput={ this.linkState('selectedProperty.description') }
              />
            </label>
          </div>
        </div>
        }
      </div>
    </div>;
  }
}

export default PropertiesManager;
